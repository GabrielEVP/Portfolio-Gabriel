---
import projectData from "../data/proyect.json";
const { sectionTitle, technologiesLabel, projects } = projectData;
---

<section id="projects" class="min-h-screen bg-neutral-50 py-16 animate-fade-scroll">
   <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-16">
         <h2 class="text-4xl lg:text-5xl font-light text-gray-900 mb-6 tracking-wide">
            {sectionTitle}
         </h2>
         <div class="w-24 h-1 bg-black mx-auto rounded-full"></div>
      </div>

      <div class="grid gap-16 grid-cols-1 lg:grid-cols-2">
         {
            projects.map((project, idx) => {
               const githubLink = project.links.find((link) => typeof link === "string" && link.toLowerCase().includes("github"));
               const imagesLink = project.links.find((link) => typeof link === "string" && link.toLowerCase().includes("imagen"));
               return (
                  <div class="bg-white border border-gray-200 rounded-2xl p-16 flex flex-col h-full max-full">
                     <div class="flex gap-4 mb-6">
                        {githubLink && (
                           <a
                              href={githubLink}
                              target="_blank"
                              rel="noopener noreferrer"
                              class="inline-flex items-center gap-2 px-5 py-2 bg-black text-white rounded-full font-medium text-sm hover:bg-gray-900 transition"
                           >
                              <svg fill="currentColor" viewBox="0 0 24 24" class="w-5 h-5">
                                 <path d="M12 0c-6.63 0-12 5.37-12 12 0 5.3 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61-.546-1.387-1.333-1.756-1.333-1.756-1.09-.745.083-.729.083-.729 1.205.085 1.84 1.237 1.84 1.237 1.07 1.834 2.807 1.304 3.492.997.108-.775.418-1.305.762-1.605-2.665-.305-5.466-1.332-5.466-5.93 0-1.31.468-2.38 1.236-3.22-.124-.303-.535-1.527.117-3.176 0 0 1.008-.322 3.3 1.23.957-.266 1.984-.399 3.003-.404 1.018.005 2.046.138 3.006.404 2.289-1.552 3.295-1.23 3.295-1.23.653 1.649.242 2.873.119 3.176.77.84 1.235 1.91 1.235 3.22 0 4.61-2.803 5.624-5.475 5.921.43.372.823 1.102.823 2.222 0 1.606-.014 2.898-.014 3.293 0 .322.216.694.825.576 4.765-1.587 8.2-6.086 8.2-11.384 0-6.63-5.373-12-12-12z" />
                              </svg>
                              GitHub
                           </a>
                        )}
                        {imagesLink && (
                           <button
                              type="button"
                              id={`open-modal-img-${idx}`}
                              class="inline-flex items-center gap-2 px-5 py-2 border border-black text-black rounded-full font-medium text-sm hover:bg-gray-100 transition"
                           >
                              <svg fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" class="w-5 h-5">
                                 <path stroke-linecap="round" stroke-linejoin="round" d="M4 16l4-4a3 3 0 0 1 4.24 0l4 4M2 20h20M12 4v16" />
                              </svg>
                              Imágenes
                           </button>
                        )}
                     </div>
                     <h3 class="text-2xl font-semibold text-gray-900 mb-2 border-b pb-2 tracking-wide">{project.title}</h3>
                     <p class="text-gray-700 text-base mb-6 flex-1">{project.description}</p>
                     {project.technologies && (
                        <div class="mb-6">
                           <p class="text-gray-800 font-medium mb-2 text-sm">{technologiesLabel}</p>
                           <div class="grid grid-cols-4 gap-3">
                              {project.technologies.map((tech) => (
                                 <div class="flex flex-col items-center">
                                    <img src={tech.icon} alt={tech.name} class="w-8 h-8 object-contain" />
                                    <span class="text-xs text-gray-600 mt-1">{tech.name}</span>
                                 </div>
                              ))}
                           </div>
                        </div>
                     )}
                     <div id={`modal-img-${idx}`} class="hidden fixed inset-0 z-50 flex items-center justify-center bg-black/60">
                        <div class="bg-white rounded-xl p-8 max-w-lg w-full relative animate-modal-in">
                           <button type="button" id={`close-modal-img-${idx}`} class="absolute top-3 right-3 text-gray-700 hover:text-black text-4xl p-2">
                              &times;
                           </button>
                           <div class="text-center text-gray-700">Aquí irán las imágenes</div>
                        </div>
                     </div>
                  </div>
               );
            })
         }
      </div>
   </div>
</section>

<script>
   if (typeof window !== "undefined") {
      document.querySelectorAll('[id^="open-modal-img-"]').forEach((btn) => {
         btn.addEventListener("click", () => {
            const idx = btn.id.replace("open-modal-img-", "");
            const modal = document.getElementById(`modal-img-${idx}`);
            if (modal) modal.classList.remove("hidden");
         });
      });
      document.querySelectorAll('[id^="close-modal-img-"]').forEach((btn) => {
         btn.addEventListener("click", () => {
            const idx = btn.id.replace("close-modal-img-", "");
            const modal = document.getElementById(`modal-img-${idx}`);
            if (modal) modal.classList.add("hidden");
         });
      });
   }
</script>

<style>
   @keyframes modalIn {
      from {
         opacity: 0;
         transform: scale(0.92) translateY(40px);
      }
      to {
         opacity: 1;
         transform: scale(1) translateY(0);
      }
   }
   .animate-modal-in {
      animation: modalIn 0.5s cubic-bezier(0.4, 0, 0.2, 1);
   }
</style>
